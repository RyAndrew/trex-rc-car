/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 6
#define NUMPIXELS 2


Adafruit_NeoPixel rgbleds = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);


#define COMMAND_LED_RED 1
#define COMMAND_LED_GREEN 2
#define COMMAND_LED_BLUE 3
#define COMMAND_LED_WHITE 4
#define COMMAND_LED_FLASH_RED 5 
#define COMMAND_LED_FLASH_GREEN 6 
#define COMMAND_LED_FLASH_BLUE 7
#define COMMAND_LED_FLASH_WHITE 8
#define COMMAND_TEXT 't'


static const unsigned char PROGMEM t_rex_jaw_closed[] = { 
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0f,0xd9,0x81,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0x80,0x70,0x00,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x06,0x00,0x00,0x80,0x00,0x08,0xff,0xff,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x0c,0x00,0xff,0x86,0x00,0x07,0x80,0x01,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x00,0x00,0x0e,0x0f,0x80,0x00,0x00,0x60,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x70,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0xc0,0x00,0xc0,0x0e,0x00,0xf3,0x80,0x00,0x0c,0x00,0x00,0x00,0x00
,0x00,0x00,0x01,0x80,0x00,0xf0,0x0c,0x00,0x18,0xc0,0x00,0x04,0x00,0x00,0x00,0x00
,0x00,0x00,0x01,0x00,0x00,0xc0,0x00,0x1f,0x80,0x78,0x00,0x02,0x00,0x00,0x00,0x00
,0x00,0x00,0x02,0x00,0x00,0xc0,0x00,0x30,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00
,0x00,0x00,0x06,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0x00,0x60,0x00,0x00,0x00,0xc0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x01,0xd8,0x00,0x00,0x03,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x30,0x1f,0xff,0x06,0x00,0x00,0x0f,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xe0,0x18,0xc6,0x07,0x80,0x01,0xfb,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x80,0x30,0x44,0x07,0xe7,0xff,0x33,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x03,0x04,0x70,0x4c,0x06,0x7f,0x66,0x31,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0c,0x07,0xfc,0x5f,0x0e,0x66,0x66,0x30,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x08,0x40,0x0f,0xf7,0x8c,0x66,0x6a,0x20,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x19,0xc0,0x01,0xe0,0xcd,0x65,0x6a,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x60,0x63,0x31,0x18,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x3b,0x31,0x98,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x0f,0x31,0xff,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x03,0xff,0x81,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x0c,0x00,0x80,0x00,0x20,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1c,0x00,0xc0,0x00,0x38,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x74,0x00,0x40,0x00,0x0e,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0xc6,0x00,0x60,0x00,0x07,0x80,0x00,0x01,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x01,0x86,0x00,0x20,0x00,0x0c,0xff,0x80,0x01,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0x04,0x00,0x10,0x00,0x18,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x06,0x0c,0x00,0x0c,0x00,0x30,0x00,0x3f,0x8e,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1c,0x30,0x00,0x06,0x00,0xe0,0x00,0x00,0xf8,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x17,0xe0,0x00,0x01,0x8f,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x01,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x7c,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0xcc,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0x0c,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x04,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x70,0x0f,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xc0,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x06,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
 };


 static const unsigned char PROGMEM t_rex_jaw_open[] = { 
 0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x7d,0xe0,0x00,0x00,0x3f,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x80,0x40,0x20,0x00,0x3f,0xe0,0x78,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0f,0xcf,0xc0,0x3f,0xff,0x20,0x00,0x0c,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0xf8,0x78,0x00,0x00,0x01,0x20,0x00,0x07,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0x80,0x30,0x00,0x00,0x01,0xe0,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x03,0x00,0x00,0x40,0x03,0xc0,0x00,0x00,0x01,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x06,0x00,0x00,0xc1,0x80,0x00,0x60,0x00,0x00,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x0c,0x00,0x3f,0x83,0xc0,0x3f,0x3f,0x00,0x00,0x40,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x00,0x00,0x03,0xc0,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00
,0x00,0x00,0x00,0x70,0x00,0x00,0x03,0xc1,0xc0,0x00,0x00,0x00,0x20,0x00,0x00,0x00
,0x00,0x00,0x00,0xc0,0x00,0xc0,0x01,0x82,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00
,0x00,0x00,0x01,0x80,0x00,0xb8,0x00,0x02,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00
,0x00,0x00,0x01,0x00,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00
,0x00,0x00,0x02,0x00,0x00,0xcc,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00
,0x00,0x00,0x06,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x19,0x80,0x00,0x00,0x00,0x00,0x01,0xd8,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xf0,0xc0,0x00,0x0f,0x00,0x00,0x0f,0x98,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xc0,0x70,0x00,0x1d,0xc0,0x00,0xf9,0x98,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x00,0x30,0x38,0x0f,0xb1,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x4c,0x00,0x00,0x70,0x1f,0xfb,0x31,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x50,0x33,0x33,0x31,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x30,0x1f,0x80,0xf8,0x23,0x33,0x31,0x80,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0xe0,0x18,0xc1,0xe8,0x23,0x33,0x30,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x01,0x80,0x30,0x77,0xd8,0x61,0x33,0x30,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x03,0x00,0x40,0x1c,0xb0,0x40,0x20,0x10,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0c,0x00,0x78,0x00,0xa0,0x40,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x08,0x40,0x0c,0x01,0xa0,0x40,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x19,0xc0,0x07,0x01,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x11,0x00,0x01,0x83,0x81,0x80,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0xc7,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x45,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x24,0xe4,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x62,0x00,0x00,0x3f,0xec,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0xc3,0x00,0x00,0x0e,0x39,0x80,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0x81,0x00,0x00,0x06,0x1b,0x80,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0x01,0x80,0x00,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x0c,0x00,0x80,0x00,0x00,0x06,0x18,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1c,0x00,0xc0,0x00,0x00,0x03,0x30,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x74,0x00,0x40,0x00,0x00,0x01,0xb1,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0xc6,0x00,0x60,0x00,0x00,0x00,0xe3,0x10,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x01,0x86,0x00,0x20,0x00,0x10,0x00,0x67,0x30,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0x04,0x00,0x10,0x00,0x18,0x00,0x3e,0x30,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x06,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0e,0x31,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x1c,0x30,0x00,0x06,0x00,0x06,0x00,0x03,0xf1,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x17,0xe0,0x00,0x01,0x80,0x03,0x00,0x00,0x0f,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x80,0x00,0x07,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xe0,0x00,0x00,0xe0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0xc0,0x78,0x00,0x00,0x70,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x1e,0x00,0x00,0x30,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x0f,0x00,0x00,0x10,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x0e,0x08,0x00,0x00,0x03,0xc0,0x00,0x70,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x7c,0x18,0x00,0x00,0x01,0xe0,0x00,0xe0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x01,0xcc,0x30,0x00,0x00,0x00,0xf0,0x01,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0x0c,0x60,0x00,0x00,0x00,0x18,0x01,0xc0,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x04,0xc0,0x00,0x00,0x00,0x0e,0x07,0x80,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x70,0x0f,0x80,0x00,0x00,0x00,0x03,0xe7,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xc0,0x3e,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x06,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00
};

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  Serial.begin(115200);
  Serial.setTimeout(10); //wait only 10ms to read a string with ReadString(). Default = 1000

  Serial.println("initialized");
  
  rgbleds.begin();
  rgbleds.show(); // Initialize all pixels to 'off'

  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);  // initialize with the I2C addr 0x3D (for the 128x64)
  
}

uint32_t ledColorRed = rgbleds.Color(255, 0, 0);
uint32_t ledColorGreen = rgbleds.Color(0, 255, 0);
uint32_t ledColorBlue = rgbleds.Color(0, 0, 255);
uint32_t ledColorWhite = rgbleds.Color(255, 255, 255);
uint32_t *serialCommandColor;

unsigned int serialCommand = 0;
char serialCommandChar[2];
unsigned long serialCommandStart;
unsigned long ledCommandDuration = 3000;
unsigned long ledCommandBlinkDuration = 50;
bool ledCommandBlinking = 0;
unsigned long  ledCommandBlinkingLastBlink;
bool ledCommandBlinkingState = 1;
bool serialCommandExecuting = 0;

bool showingText = 0;
bool serialTextStringReading = 0;
char serialTextString[22];
unsigned int serialTextLine;
unsigned int serialTextStringCounter = 0;

unsigned long start = millis();
unsigned long lightTime = 250;

bool lastChompState = 0;
unsigned long lastChomp = start;
unsigned long lastChompOpenTime = 600;
unsigned long lastChompCloseTime = 150;
unsigned long *lastChompCloseInterval = &lastChompOpenTime;
const unsigned char (*lastChompDrawing)[1024] = &t_rex_jaw_open;

void loop() {
  readSerialPort();

  showText();

  if(serialCommand == COMMAND_TEXT){
    return;
  }
  handleLeds();
  //rainbowCycle(20);

  showTrexChomp();

}
void showText(){
  if( serialCommand != COMMAND_TEXT ){
    return;
  }
  if(showingText == 0){
    display.clearDisplay();
    showingText = 1;
  }

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,(serialTextLine - 1)*17);
  display.println(serialTextString);

  display.display();

}
void readSerialPort(){

  while(Serial.available()){

//    unsigned long currentLoopTime = millis();
  
    Serial.print("serial: ");

    if(serialTextStringReading){
      serialTextString[serialTextStringCounter] = Serial.read();
      serialTextStringCounter++;
      if(serialTextStringCounter > 21){
        serialTextStringCounter = 0;
      }
    }else{
        serialCommandChar[0] = Serial.read();
        if( serialCommandChar[0] == COMMAND_TEXT){
          serialCommand = COMMAND_TEXT;
          
          serialTextStringReading=1;

          serialCommandChar[0] = Serial.read();
          serialCommandChar[1] = '\0';
          serialTextLine = atoi(serialCommandChar);
          
        }else{
          serialTextStringReading=0;
          showingText=0;
          
          serialCommandChar[1] = '\0';
          Serial.print(serialCommandChar);
          serialCommand = atoi(serialCommandChar);
        }
         Serial.print(" - ");
         Serial.println(serialCommand);
         serialCommandStart = millis();
    }

//   Serial.println(millis()-currentLoopTime);
  }
  if(serialTextStringCounter > 0){
    serialTextString[serialTextStringCounter] = '\0';
    serialTextStringReading = 0;
  }
  serialTextStringCounter = 0;

}
void showTrexChomp(){
    
  if(millis() - lastChomp < *lastChompCloseInterval){
    return;
  }
  
  unsigned long currentLoopTime = millis();
  
  if(lastChompState == 0){
    lastChompState = 1;
    lastChompDrawing = &t_rex_jaw_open;
    lastChompCloseInterval = &lastChompCloseTime;
  }else{
    lastChompState = 0;
    lastChompDrawing = &t_rex_jaw_closed;
    lastChompCloseInterval = &lastChompOpenTime;
  }
  display.clearDisplay();
  display.drawBitmap(0, 0, *lastChompDrawing, 128, 64, WHITE);
  display.display();
  lastChomp = millis();

   //Serial.print("t ");
   //Serial.println(millis()-currentLoopTime);
}

//uint16_t pixel, color = 0;
uint16_t color,pixel = 0;
unsigned long pixelChangeInterval = 20;
unsigned long pixelChangeLast = start + pixelChangeInterval;

void handleLeds() {

/*  
COMMAND_LED_RED
COMMAND_LED_GREEN
COMMAND_LED_BLUE
COMMAND_LED_WHITE
COMMAND_LED_FLASH_RED
COMMAND_LED_FLASH_GREEN
COMMAND_LED_FLASH_BLUE
COMMAND_LED_FLASH_WHITE
*/
switch(serialCommand){
  case 0:
    break;
  default:
    serialCommand = 0;
    break;
  case COMMAND_LED_RED:
     serialCommandColor = &ledColorRed;
  break;
  case COMMAND_LED_GREEN:
     serialCommandColor = &ledColorGreen;
  break;
  case COMMAND_LED_BLUE:
     serialCommandColor = &ledColorBlue;
  break;
  case COMMAND_LED_WHITE:
     serialCommandColor = &ledColorWhite;
  break;
  case COMMAND_LED_FLASH_RED:
     serialCommandColor = &ledColorRed;
      ledCommandBlinking = 1;
      ledCommandBlinkingLastBlink = millis();
  break;
  case COMMAND_LED_FLASH_GREEN:
     serialCommandColor = &ledColorGreen;
      ledCommandBlinking = 1;
      ledCommandBlinkingLastBlink = millis();
  break;
  case COMMAND_LED_FLASH_BLUE:
     serialCommandColor = &ledColorBlue;
      ledCommandBlinking = 1;
      ledCommandBlinkingLastBlink = millis();
  break;
  case COMMAND_LED_FLASH_WHITE:
     serialCommandColor = &ledColorWhite;
      ledCommandBlinking = 1;
      ledCommandBlinkingLastBlink = millis();
  break;
}

if(serialCommand > 0){
  serialCommandExecuting = 1;
  serialCommand = 0;
}
if(serialCommandExecuting == 1){
  
  if(ledCommandBlinking){
    if(millis() - ledCommandBlinkingLastBlink > ledCommandBlinkDuration){
      ledCommandBlinkingLastBlink = millis();
      if(ledCommandBlinkingState == 1){
        //Serial.println("blinking off!");
        rgbleds.clear();
        ledCommandBlinkingState = 0;
      }else{
        //Serial.println("blinking on!");
        rgbleds.setPixelColor(0, *serialCommandColor);
        rgbleds.setPixelColor(1, *serialCommandColor);
        ledCommandBlinkingState = 1;
      }
    }
  }else{
    //Serial.println("fixed color");
    rgbleds.setPixelColor(0, *serialCommandColor);
    rgbleds.setPixelColor(1, *serialCommandColor);
  }
  rgbleds.setBrightness(50);
  rgbleds.show(); 
  
  if(millis() - serialCommandStart > ledCommandDuration){
    serialCommandExecuting = 0;
    ledCommandBlinking = 0;
    ledCommandBlinkingState = 1;
  }
  return;
}

//if no command we run rainbow cycling

if(millis() - pixelChangeLast < pixelChangeInterval){
  return;
}

   pixelChangeLast = millis();
  
  for(pixel=0; pixel<rgbleds.numPixels(); pixel++) {
    rgbleds.setPixelColor(pixel, Wheel((pixel+color) & 255));
  }
  rgbleds.setBrightness(50);
  rgbleds.show();

  color++;
  if(color > 256){
    color = 0;
  }
}

// Slightly different, this makes the rainbow equally distributed throughout
void rainbowCycle(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< rgbleds.numPixels(); i++) {
      rgbleds.setPixelColor(i, Wheel(((i * 256 / rgbleds.numPixels()) + j) & 255));
    }
    rgbleds.show();
    delay(wait);
  }
}


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return rgbleds.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return rgbleds.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return rgbleds.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}

